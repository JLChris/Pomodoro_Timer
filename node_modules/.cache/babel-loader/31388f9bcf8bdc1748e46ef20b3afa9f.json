{"ast":null,"code":"var _jsxFileName = \"/Users/jonahchristian/Desktop/Thinkful/projects/promodoro-timer/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/TimerDisplay.js\";\nimport React from \"react\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction TimerDisplay({\n  session,\n  durations,\n  isTimerRunning\n}) {\n  let elapsedTime = 0;\n  const focusTime = durations.focus * 60;\n  const breakTime = durations.break * 60;\n\n  if (session && session.label === \"Focusing\") {\n    elapsedTime = (focusTime - session.timeRemaining) / focusTime * 100;\n  } else if (session && session.label === \"On Break\") {\n    elapsedTime = (breakTime - session.timeRemaining) / breakTime * 100;\n  }\n\n  if (session) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"session-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 21\n      }\n    }, session === null || session === void 0 ? void 0 : session.label, \" for \", session.label === \"Focusing\" ? minutesToDuration(durations.focus) : minutesToDuration(durations.break), \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      \"data-testid\": \"session-sub-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 21\n      }\n    }, secondsToDuration(session === null || session === void 0 ? void 0 : session.timeRemaining), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ProgressBar, {\n      session: session,\n      durations: durations,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }\n    }, isTimerRunning ? \"\" : /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 40\n      }\n    }, \"PAUSED\")));\n  } else return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  });\n}\n\nexport default TimerDisplay;","map":{"version":3,"sources":["/Users/jonahchristian/Desktop/Thinkful/projects/promodoro-timer/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/TimerDisplay.js"],"names":["React","minutesToDuration","secondsToDuration","ProgressBar","TimerDisplay","session","durations","isTimerRunning","elapsedTime","focusTime","focus","breakTime","break","label","timeRemaining"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,mBAArD;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,SAASC,YAAT,CAAsB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,SAAX;AAAsBC,EAAAA;AAAtB,CAAtB,EAA8D;AAC1D,MAAIC,WAAW,GAAG,CAAlB;AACA,QAAMC,SAAS,GAAGH,SAAS,CAACI,KAAV,GAAkB,EAApC;AACA,QAAMC,SAAS,GAAGL,SAAS,CAACM,KAAV,GAAkB,EAApC;;AACA,MAAIP,OAAO,IAAIA,OAAO,CAACQ,KAAR,KAAkB,UAAjC,EAA6C;AACzCL,IAAAA,WAAW,GAAI,CAACC,SAAS,GAAGJ,OAAO,CAACS,aAArB,IAAsCL,SAAvC,GAAoD,GAAlE;AACH,GAFD,MAEO,IAAIJ,OAAO,IAAIA,OAAO,CAACQ,KAAR,KAAkB,UAAjC,EAA6C;AAChDL,IAAAA,WAAW,GAAI,CAACG,SAAS,GAAGN,OAAO,CAACS,aAArB,IAAsCH,SAAvC,GAAoD,GAAlE;AACH;;AACD,MAAIN,OAAJ,EAAa;AACT,wBAAQ,uDACJ;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAI,qBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKA,OADL,aACKA,OADL,uBACKA,OAAO,CAAEQ,KADd,WAEQR,OAAO,CAACQ,KAAR,KAAkB,UAAlB,GAA+BZ,iBAAiB,CAACK,SAAS,CAACI,KAAX,CAAhD,GACIT,iBAAiB,CAACK,SAAS,CAACM,KAAX,CAH7B,aAFJ,eAQI;AAAG,MAAA,SAAS,EAAC,MAAb;AAAoB,qBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKV,iBAAiB,CAACG,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAES,aAAV,CADtB,eARJ,CADJ,CADI,eAeJ;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,WAAD;AAAa,MAAA,OAAO,EAAET,OAAtB;AAA+B,MAAA,SAAS,EAAEC,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CAfI,eAoBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKC,cAAc,GAAG,EAAH,gBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAD3B,CApBI,CAAR;AAwBH,GAzBD,MA0BK,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAER;;AAED,eAAeH,YAAf","sourcesContent":["import React from \"react\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction TimerDisplay({ session, durations, isTimerRunning }) {\n    let elapsedTime = 0;\n    const focusTime = durations.focus * 60;\n    const breakTime = durations.break * 60;\n    if (session && session.label === \"Focusing\") {\n        elapsedTime = ((focusTime - session.timeRemaining) / focusTime) * 100;\n    } else if (session && session.label === \"On Break\") {\n        elapsedTime = ((breakTime - session.timeRemaining) / breakTime) * 100;\n    }\n    if (session) {\n        return (<>\n            <div className=\"row mb-2\">\n                <div className=\"col\">\n                    {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n                    <h2 data-testid=\"session-title\">\n                        {session?.label} for {\n                            session.label === \"Focusing\" ? minutesToDuration(durations.focus) :\n                                minutesToDuration(durations.break)} minutes\n                    </h2>\n                    {/* TODO: Update message below correctly format the time remaining in the current session */}\n                    <p className=\"lead\" data-testid=\"session-sub-title\">\n                        {secondsToDuration(session?.timeRemaining)} remaining\n                    </p>\n                </div>\n            </div>\n            <div className=\"row mb-2\">\n                <div className=\"col\">\n                    <ProgressBar session={session} durations={durations} />\n                </div>\n            </div>\n            <div>\n                {isTimerRunning ? \"\" : <h2>PAUSED</h2>}\n            </div>\n        </>);\n    }\n    else return <div></div>;\n\n}\n\nexport default TimerDisplay;"]},"metadata":{},"sourceType":"module"}