{"ast":null,"code":"var _jsxFileName = \"/Users/jonahchristian/Desktop/Thinkful/projects/promodoro-timer/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/TimerDisplay.js\";\nimport React from \"react\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\n\nfunction elapsedTimePercentage(elapsedTime, totalTime) {\n  return elapsedTime / totalTime * 100;\n}\n\nfunction TimerDisplay({\n  session,\n  focusDuration,\n  breakDuration,\n  isTimerRunning\n}) {\n  if (session) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"session-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 21\n      }\n    }, session === null || session === void 0 ? void 0 : session.label, \" for \", session.label === \"Focusing\" ? minutesToDuration(focusDuration) : minutesToDuration(breakDuration), \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      \"data-testid\": \"session-sub-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 21\n      }\n    }, secondsToDuration(session === null || session === void 0 ? void 0 : session.timeRemaining), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress\",\n      style: {\n        height: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar\",\n      role: \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\",\n      \"aria-valuenow\": session.label === \"Focusing\" ? elapsedTimePercentage(session.timeRemaining, secondsToDuration(focusDuration)) : elapsedTimePercentage(session.timeRemaining, secondsToDuration(breakDuration)) // TODO: Increase aria-valuenow as elapsed time increases\n      ,\n      style: {\n        width: \"0%\"\n      } // TODO: Increase width % as elapsed time increases\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 25\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }, isTimerRunning ? \"\" : /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 40\n      }\n    }, \"PAUSED\")));\n  } else return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  });\n}\n\nexport default TimerDisplay;","map":{"version":3,"sources":["/Users/jonahchristian/Desktop/Thinkful/projects/promodoro-timer/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/TimerDisplay.js"],"names":["React","minutesToDuration","secondsToDuration","elapsedTimePercentage","elapsedTime","totalTime","TimerDisplay","session","focusDuration","breakDuration","isTimerRunning","label","timeRemaining","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,mBAArD;;AAEA,SAASC,qBAAT,CAA+BC,WAA/B,EAA4CC,SAA5C,EAAuD;AACnD,SAAQD,WAAW,GAAGC,SAAf,GAA4B,GAAnC;AACH;;AAED,SAASC,YAAT,CAAsB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,aAAX;AAA0BC,EAAAA,aAA1B;AAAyCC,EAAAA;AAAzC,CAAtB,EAAiF;AAC7E,MAAIH,OAAJ,EAAa;AACT,wBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACJ;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAI,qBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKA,OADL,aACKA,OADL,uBACKA,OAAO,CAAEI,KADd,WAEQJ,OAAO,CAACI,KAAR,KAAkB,UAAlB,GAA+BV,iBAAiB,CAACO,aAAD,CAAhD,GACIP,iBAAiB,CAACQ,aAAD,CAH7B,aAFJ,eAQI;AAAG,MAAA,SAAS,EAAC,MAAb;AAAoB,qBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKP,iBAAiB,CAACK,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEK,aAAV,CADtB,eARJ,CADJ,CADI,eAeJ;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AACI,MAAA,SAAS,EAAC,cADd;AAEI,MAAA,IAAI,EAAC,aAFT;AAGI,uBAAc,GAHlB;AAII,uBAAc,KAJlB;AAKI,uBAAeN,OAAO,CAACI,KAAR,KAAkB,UAAlB,GACXR,qBAAqB,CAACI,OAAO,CAACK,aAAT,EAAwBV,iBAAiB,CAACM,aAAD,CAAzC,CADV,GAEXL,qBAAqB,CAACI,OAAO,CAACK,aAAT,EAAwBV,iBAAiB,CAACO,aAAD,CAAzC,CAP7B,CAOwF;AAPxF;AAQI,MAAA,KAAK,EAAE;AAAEK,QAAAA,KAAK,EAAE;AAAT,OARX,CAQ4B;AAR5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CADJ,CAfI,eA+BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKJ,cAAc,GAAG,EAAH,gBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAD3B,CA/BI,CAAR;AAmCH,GApCD,MAqCK,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAER;;AAED,eAAeJ,YAAf","sourcesContent":["import React from \"react\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\n\nfunction elapsedTimePercentage(elapsedTime, totalTime) {\n    return (elapsedTime / totalTime) * 100;\n}\n\nfunction TimerDisplay({ session, focusDuration, breakDuration, isTimerRunning }) {\n    if (session) {\n        return (<div>\n            <div className=\"row mb-2\">\n                <div className=\"col\">\n                    {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n                    <h2 data-testid=\"session-title\">\n                        {session?.label} for {\n                            session.label === \"Focusing\" ? minutesToDuration(focusDuration) :\n                                minutesToDuration(breakDuration)} minutes\n                    </h2>\n                    {/* TODO: Update message below correctly format the time remaining in the current session */}\n                    <p className=\"lead\" data-testid=\"session-sub-title\">\n                        {secondsToDuration(session?.timeRemaining)} remaining\n                    </p>\n                </div>\n            </div>\n            <div className=\"row mb-2\">\n                <div className=\"col\">\n                    <div className=\"progress\" style={{ height: \"20px\" }}>\n                        <div\n                            className=\"progress-bar\"\n                            role=\"progressbar\"\n                            aria-valuemin=\"0\"\n                            aria-valuemax=\"100\"\n                            aria-valuenow={session.label === \"Focusing\" ?\n                                elapsedTimePercentage(session.timeRemaining, secondsToDuration(focusDuration)) :\n                                elapsedTimePercentage(session.timeRemaining, secondsToDuration(breakDuration))} // TODO: Increase aria-valuenow as elapsed time increases\n                            style={{ width: \"0%\" }} // TODO: Increase width % as elapsed time increases\n                        />\n                    </div>\n                </div>\n            </div>\n            <div>\n                {isTimerRunning ? \"\" : <h2>PAUSED</h2>}\n            </div>\n        </div>);\n    }\n    else return <div></div>;\n\n}\n\nexport default TimerDisplay;"]},"metadata":{},"sourceType":"module"}